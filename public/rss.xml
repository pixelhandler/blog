<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
 <title>RSS feed for pixelhandler.dev</title>
 <description>Personal blog of Bill Heaton</description>
 <link>https://pixelhandler.dev</link>
 <image>
    <url>https://dl.dropboxusercontent.com/u/5739722/img/pixelhander-2016.jpg</url>
    <link>https://pixelhandler.dev</link>
    <title>RSS feed for pixelhandler.dev</title>
 </image>
 <atom:link href="https://pixelhandler.dev/rss.xml" rel="self" type="application/rss+xml" />
 <lastBuildDate>Thu, 31 May 2018 12:00:00 +0000</lastBuildDate>
 <pubDate>Thu, 31 May 2018 12:00:00 +0000</pubDate>
 <ttl>600</ttl>

 <item>
  <title>EmberJS2018 – A Few Suggestions</title>
  <description>This post is a response to: Ember2018 Roadmap Call for Posts. My backstory… I started developing with Ember.js before the framework hit a 1.0 release. I enjoyed the ride so far. Over the years, the Ember commmunity has impressed me over and over. It is my pleasure to be a part of the community, and to contribute where I can. Most of all, I enjoyed making friends around the world. So, on to the topic…</description>
  <link>https://pixelhandler.dev/posts/emberjs2018-a-few-suggestions</link>
  <guid isPermaLink="true">https://pixelhandler.dev/posts/emberjs2018-a-few-suggestions</guid>
  <pubDate>Thu, 31 May 2018 12:00:00 +0000</pubDate>
 </item>

 <item>
  <title>Change, everything will be fine</title>
  <description>In 2017 so many parts of my life went through a transition. Change is good, right? How much is too much, I can’t answer that for me change has always been enough. I value the ability to respond to change with a positive attitude and resolve. I think change is constant, change will keep happening, everything will be fine. It is perfectly OK to challenge your assumptions and embrace the new and even the old.
  I remember when the “Think Different” posters came out. Back then, I worked in Desktop Publishing on PC’s and Macs. At the time, my career was entirely in front of me and I resonated with the iconic photo of Albert Einstein with the caption, “Think Different”. As a mantra, that phrase still resonates with me, in many ways - regarding the topics of changes I faced in 2017. This post is my story of the changes I faced over the past year, but also addresses a key principle regarding software craftsmanship (wait for it…).</description>
  <link>https://pixelhandler.dev/posts/change-everything-will-be-fine</link>
  <guid isPermaLink="true">https://pixelhandler.dev/posts/change-everything-will-be-fine</guid>
  <pubDate>Mon, 05 Sep 2017 12:00:00 +0000</pubDate>
 </item>

 <item>
  <title>Working Remote, Somewhere Between Bliss &amp; Distress</title>
  <description>Over the past four years I’ve worked remotely as a software developer. There are obvious benefits and drawbacks from the choice to live and work well beyond the reach of the traditional office space, say downtown. I would like to share the various levels of success and failures I’ve recognized through my experiences as a remote employee. I’ll recount a few scenarios and describe, from my perspective… when it doesn’t work, when it half works, when trying to make it work, and when it just works.</description>
  <link>https://pixelhandler.dev/posts/working-remote-somewhere-between-bliss-and-distress</link>
  <guid isPermaLink="true">https://pixelhandler.dev/posts/working-remote-somewhere-between-bliss-and-distress</guid>
  <pubDate>Tue, 27 Sep 2016 12:00:00 +0000</pubDate>
 </item>

 <item>
  <title>Managing Developer Happiness</title>
  <description>A few observations on managing web developers, and oneself… I spent the past twelve years building web applications. Among the managers I’ve had the privilege to work with, some have exercised great leadership and others only spew rubbish; both types have made an impression on me. In this article, I will discuss what attracts developers and keeps them, what expectations developers have from management, what a development manager should focus on and what to avoid, process, team size, how to stay sharp, and what a manager must get right to be successful at helping others do their best work.</description>
  <link>https://pixelhandler.dev/posts/managing-developer-happiness</link>
  <guid isPermaLink="true">https://pixelhandler.dev/posts/managing-developer-happiness</guid>
  <pubDate>Thu, 08 Sep 2016 12:00:00 +0000</pubDate>
 </item>

 <item>
  <title>Developing Ember Addons: Next Generation CSS with PostCSS</title>
  <description>Over the years I've used Sass and Less to improve my development experience with CSS (stylesheets for web applications). I enjoyed the improvements that both Less and Sass provided. Now that I use Babel to transpile JavaScript modules in my application's build pipeline using Ember CLI - I enjoy using modern JavaScript as I develop and ship web applications today. Can I also write next generation CSS styles today? The answer is yes! With PostCSS.</description>
  <link>https://pixelhandler.dev/posts/developing-ember-addons-next-generation-css-with-postcss</link>
  <guid isPermaLink="true">https://pixelhandler.dev/posts/developing-ember-addons-next-generation-css-with-postcss</guid>
  <pubDate>Tue, 23 Feb 2016 12:00:00 +0000</pubDate>
 </item>

 <item>
  <title>Ember.js: Handling Failure Using Route error Substates</title>
  <description>Handing data persistence operations between your Ember (client) application and API server requires fault tolerance. The app needs to notify users of relevant error responses and how to recover from various API server error responses. Handling JSON API error responses for HTTP status codes 400, 404, 422, 500, 502, 302, etc. should be first class in the application code. In this article error actions will not be primarily used, instead the error substate of an Ember.Route will be used to respond to the errors. The error action will be used secondarily by sending an error action, send('error'), after a failed update. The ember-jsonapi-resources addon has a example "test" app, see jr-test which includes example code for using error substates to handle various server responses, i.e. 500, 400, 404, 422. This article was first created as documentation for the addon see the Error Handling Guide for additional content.</description>
  <link>https://pixelhandler.dev/posts/emberjs-handling-failure-using-route-error-substates</link>
  <guid isPermaLink="true">https://pixelhandler.dev/posts/emberjs-handling-failure-using-route-error-substates</guid>
  <pubDate>Tue, 19 Jan 2016 12:00:00 +0000</pubDate>
 </item>

 <item>
  <title>My Battle with Data Persistence in Ember Apps</title>
  <description>This post fits well within the purpose of this site, my web log. What follows is my personal history (changelog) of battling data persistence in JavaScript applications built using the Ember.js framework. I've Been Everywhere, by Johnny Cash, is a song that rings true to my journey to find a data persistence solution that I think fits well within a complex browser application. I'd like a data persistence library that does a great job reading and writing data, as close to real time as possible (without data collisions). A solution that handles data relationships well and makes it simple and painless. With a model prototype (class) that closely mimics the JSON payload and is flexible to live as a complete representation of an object or an incomplete representation. Which uses a JSON format that is discoverable and self documenting. I've tried plain old AJAX with REST, Ember Data, Ember Model, Ember with Orbit.js using a Web Socket source. And on the back end… active model serializers in Rails, rolling out a JSON API with Node.js and supporting JSONPatch. I feel like "I've had my share, man, I've been everywhere". This is a story of my battle with the data layer in the apps I've worked on over the past three years.</description>
  <link>https://pixelhandler.dev/posts/my-battle-with-data-persistence-in-ember-apps</link>
  <guid isPermaLink="true">https://pixelhandler.dev/posts/my-battle-with-data-persistence-in-ember-apps</guid>
  <pubDate>Sat, 20 Jun 2015 12:00:00 +0000</pubDate>
 </item>

 <item>
  <title>Practical: Deploy an Ember App with ember-cli-deploy</title>
  <description>The notes below demonstrate how to setup a chat application, built with Ember CLI, that uses a backend service from Firebase. The example walks through the setup and deployment steps for pushing a client application to an Ubuntu box hosted on DigitalOcean. Node.js will be used to serve up the index.html file that is stored as the current version in a Redis database. In this practical example I'll borrow an Ember.js application created with Ember CLI by Sara Robinson of Firebase. See ember-cli-deploy this will cover the "Lightning-Approach Workflow"</description>
  <link>https://pixelhandler.dev/posts/practical-deploy-an-ember-app-with-ember-cli-deploy-on-digitalocean</link>
  <guid isPermaLink="true">https://pixelhandler.dev/posts/practical-deploy-an-ember-app-with-ember-cli-deploy-on-digitalocean</guid>
  <pubDate>Sat, 25 Apr 2015 12:00:00 +0000</pubDate>
 </item>

</channel>
</rss>
